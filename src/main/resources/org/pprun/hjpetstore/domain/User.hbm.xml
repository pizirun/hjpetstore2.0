<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="org.pprun.hjpetstore.domain">
  <class name="User" table="User">
    <comment>The user of this application.</comment>
    <id access="field" column="userId" name="id" type="long">
      <generator class="native"/>
    </id>
    <version access="field" name="version" type="long"/>
    <property length="20" name="username" not-null="true" type="string" unique="true"/>
    <!--
        Password is a keyword in some databases, so we quote it.
        The length is hash value, 128 for future evolution.
    -->
    <property column="`password`" length="128" name="password" not-null="true" type="string"/>
    <property name="apiKey" type="text">
      <column name="apiKey">
        <comment>a key for public web service access</comment>
      </column>
    </property>
    <property name="secretKey" type="text">
      <column name="secretKey">
        <comment>the private key for web service access</comment>
      </column>
    </property>
    <property length="80" name="firstname" not-null="true" type="string"/>
    <property length="80" name="lastname" not-null="true" type="string"/>
    <property length="20" name="email" not-null="true" type="string"/>
    <property length="20" name="status" not-null="true" type="user_status"/>
    <property length="80" name="phone" not-null="true" type="string"/>
    <property length="80" name="langPreference" not-null="true" type="string"/>
    <!--
            An Unidirectional associations many-to-one association(user -> favCategory)

            Nullable foreign keys are not considered to be good practice in traditional data modelling,
            so our examples do not use nullable foreign keys.
            This is not a requirement of Hibernate, and the mappings will work 
            if you drop the nullability constraints (not-null="true").

            It does not usually make sense to enable cascade on a <many-to-one>  or <many-to-many>
            association. Cascade is often useful for <one-to-one> and <one-to-many>  associations.
            cascade="none"(default) 也就是当 User 作出更改时，我们不对 category 更改.
            not-null="false" (default) means an user can have no favCategory
        -->
    <many-to-one class="Category" column="favCategoryId" foreign-key="fk_user_favCategoryId" name="favCategory"/>
    <property name="displayMylist" type="boolean"/>
    <property name="displayBanner" type="boolean"/>
    <!-- We can't change the creation time, so map it with update="false" -->
    <property access="field" name="createTime" not-null="true" update="false"/>
    <property access="field" name="updateTime"/>
    <!--
            Mapping for the bidirectional many-to-many association for User : Role
            on a join table RoleMember

            You have enabled cascade="save-update" for both ends of the collection.
            This isn’t unreasonable, we suppose. On the other hand, the cascading options
            all, delete, and delete-orphans aren’t meaningful for many-to-many associa-
            tions.
            make sure the name of foreign-key is uniquee
        -->
    <set cascade="save-update" name="roles" table="RoleMember">
      <key column="userId" not-null="true"/>
      <many-to-many class="Role" column="roleId" foreign-key="fk_user_roleId"/>
    </set>
    <!--
            Mapping for the bidirectional one-to-many association for user
            inverse="true" means Address is the owner side (User is the mirror side - inverse),
            Address will take charge of relationship 'userId', which is the foreign-key in Address.
            If only call user.getAddresses().add(newAddress), no changes are made persistent.
            But only call address.setUser(user) will make the relationship set - means the foreign-key will be persisted.
        -->
    <set cascade="save-update" inverse="true" name="addresses">
      <key column="userId"/>
      <one-to-many class="Address"/>
    </set>
    <!--
            Mapping for Order association.
            1. Please don't use List as the data type,
            which usually contain duplicates for eager collection fetching,
            http://opensource.atlassian.com/projects/hibernate/browse/HHH-1513

            2. inverse="true" means Order is the owner side (User is the mirror side - inverse),
               Order will take charge of relationship 'userId', which is the foreign-key in Order.
               If only call user.getOrders().add(newOrder), no changes are made persistent.
               But only call order.setUser(user) will make the relationship set - means the foreign-key will be persisted.

            3. cascade="all-delete-orphan" is only suited for the case of
               if removing User, all orders of the user are also need to remove.
        -->
    <set cascade="all" inverse="true" name="orders">
      <key column="userId" not-null="true"/>
      <one-to-many class="Order"/>
    </set>
  </class>
</hibernate-mapping>
