<?xml version="1.0" encoding="UTF-8"?>
<cache-configs>
    <cache-config name="mvcc-entity">

        <!-- Node locking scheme -->
        <attribute name="NodeLockingScheme">MVCC</attribute>

        <!--
            READ_COMMITTED is as strong as necessary for most
            2nd Level Cache use cases.
        -->
        <attribute name="IsolationLevel">READ_COMMITTED</attribute>

        <!-- Mode of communication with peer caches.

             INVALIDATION_SYNC is highly recommended as the mode for use
             with entity and collection caches.
        -->
        <attribute name="CacheMode">INVALIDATION_SYNC</attribute>

        <!-- Name of cluster. Needs to be the same for all members, in order
             to find each other -->
        <attribute name="ClusterName">mvcc-entity</attribute>

        <!-- Use a UDP (multicast) based stack. A udp-sync stack might be
             slightly better (no JGroups FC) but we stick with udp to
             help ensure this cache and others like timestamps-cache
             that require FC can use the same underlying JGroups resources. -->
        <attribute name="MultiplexerStack">udp</attribute>

        <!-- Whether or not to fetch state on joining a cluster. -->
        <attribute name="FetchInMemoryState">false</attribute>

        <!--
          The max amount of time (in milliseconds) we wait until the
          state (ie. the contents of the cache) are retrieved from
          existing members at startup. Ignored if FetchInMemoryState=false.
        -->
        <attribute name="StateRetrievalTimeout">20000</attribute>

        <!--
            Number of milliseconds to wait until all responses for a
            synchronous call have been received.
        -->
        <attribute name="SyncReplTimeout">20000</attribute>

        <!-- Max number of milliseconds to wait for a lock acquisition -->
        <attribute name="LockAcquisitionTimeout">15000</attribute>

        <!--  Lock Striping can lead to deadlocks -->
        <attribute name="UseLockStriping">false</attribute>

        <!--
          Indicate whether to use marshalling or not. Set this to true if you
          are running under a scoped class loader, e.g., inside an application
          server.
        -->
        <attribute name="UseRegionBasedMarshalling">true</attribute>
        <!-- Must match the value of "useRegionBasedMarshalling" -->
        <attribute name="InactiveOnStartup">true</attribute>

        <!-- For now. disable asynchronous RPC marshalling/sending -->
        <attribute name="SerializationExecutorPoolSize">0</attribute>

        <!--  Eviction policy configurations. -->
        <attribute name="EvictionPolicyConfig">
            <config>
                <attribute name="wakeUpIntervalSeconds">5</attribute>
                <!-- Name of the DEFAULT eviction policy class. -->
                <attribute name="policyClass">org.jboss.cache.eviction.LRUPolicy</attribute>
                <!--  Cache wide default -->
                <region name="/_default_">
                    <!-- Evict LRU node once we have more than this number of nodes -->
                    <attribute name="maxNodes">10000</attribute>
                    <!-- And, evict any node that hasn't been accessed in this many seconds -->
                    <attribute name="timeToLiveSeconds">1000</attribute>
                    <!-- Don't evict a node that's been accessed within this many seconds.
                        Set this to a value greater than your max expected transaction length. -->
                    <attribute name="minTimeToLiveSeconds">120</attribute>
                </region>
                <!--  Don't ever evict modification timestamps -->
                <region name="/TS" policyClass="org.jboss.cache.eviction.NullEvictionPolicy"/>
            </config>
        </attribute>

    </cache-config>

</cache-configs>