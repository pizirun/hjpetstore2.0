<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
    
    <!-- Embedded ActiveMQ Broker -->
    <amq:broker id="broker" useJmx="false" persistent="false" useShutdownHook="false">
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:61616" />
        </amq:transportConnectors>
    </amq:broker>

    <bean id="amqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <constructor-arg index="0" value="tcp://localhost:61616" />
    </bean>

    <!-- ConnectionFactory Definition -->
    <bean id="jmsConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <constructor-arg ref="amqConnectionFactory" />
    </bean>  

    <!-- the producer side -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsConnectionFactory" />
    </bean>
    <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsConnectionFactory" />
        <property name="pubSubDomain" value="true" />
    </bean>

    <!--    <bean id="destinationQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="IN_QUEUE" />
    </bean>-->
    
    <bean id="hjpetstoreOrderQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="hjpetstore.order.queue" />
    </bean>
    
    <bean id="chargeOrderRetryQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="hjpetstore.chargeOrder.retry.queue" />
    </bean>
    
    <bean id="supplierResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="hjpetstore.supplier.response.queue" />
    </bean>
    <bean id="hjpetstoreBackOrderedTopic" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg index="0" value="hjpetstore.backOrdered.topic" />
    </bean>

        
    <!-- notfiy the suppiler the order initiated -->
    <bean id="hjpetstoreOrderQueueSender" class="org.pprun.hjpetstore.service.jms.HjpetstoreOrderQueueSender" >
        <property name="jmsTemplate" ref="jmsTemplate"/>
        <property name="hjpetstoreOrderQueue" ref="hjpetstoreOrderQueue"/>
    </bean>

    <!-- to notifiy supplier hjpetstore is back ordered -->
    <bean id="hjpetstoreBackOrderedTopicSender" class="org.pprun.hjpetstore.service.jms.HjpetstoreBackOrderedTopicSender" >
        <property name="jmsTemplate" ref="jmsTopicTemplate"/>
        <property name="hjpetstoreBackOrderedTopic" ref="hjpetstoreBackOrderedTopic"/>
    </bean>

    <!-- listen to supplier order response status -->
    <bean id="jmsSupplierResponseContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination" ref="supplierResponseQueue"/>
        <property name="messageListener" ref="supplierResponseMessageListener"/>
        <property name="errorHandler" ref="errorHandler" />
    </bean>

    <!-- supplierResponseMessageListener is specific because it should be thread-safe call into orderService.update,
        instead of code the multi-thread/synchronized the service method,
        we are using spring built-in tool -
        http://static.springsource.org/spring/docs/2.0.x/reference/aop-api.html#aop-ts-pool
        The only requirement is the dependency 'commons-pool'
    -->
    <bean id="supplierResponseMessageListenerTarget"
          class="org.pprun.hjpetstore.service.jms.SupplierResponseMessageListener"
          scope="prototype">
        <description>Create a prototype supplierResponseMessageListener with its own copy of orderService</description>
        <property name="orderService" ref="orderService"/>
    </bean>

    <bean id="supplierResponseMessageListenerPoolTargetSource" class="org.springframework.aop.target.CommonsPoolTargetSource">
        <property name="targetBeanName" value="supplierResponseMessageListenerTarget"/>
        <!-- TODO: set it according to load test, based on orders hit/sec -->
        <property name="maxSize" value="25"/>
    </bean>
    <!-- this is the Message Driven POJO (MDP) for listening on supplier response the order status -->
    <bean id="supplierResponseMessageListener" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="targetSource" ref="supplierResponseMessageListenerPoolTargetSource"/>
    </bean>

    <!-- to notifiy retry chargeOrder -->
    <bean id="chargeOrderRetryQueueSender" class="org.pprun.hjpetstore.service.jms.ChargeOrderRetryQueueSender" >
        <property name="jmsTemplate" ref="jmsTemplate"/>
        <property name="retryQueue" ref="chargeOrderRetryQueue"/>
    </bean>

    <!-- listen to retry chargeOrder message -->
    <bean id="chargeOrderRetryContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination" ref="chargeOrderRetryQueue"/>
        <property name="messageListener" ref="chargeOrderRetryMessageListener"/>
        <property name="errorHandler" ref="errorHandler" />
    </bean>

    <!-- chargeOrderRetryMessageListener is specific because it should be thread-safe call into orderService.chargeOrder,
        instead of code the multi-thread/synchronized the service method,
        we are using spring built-in tool -
        http://static.springsource.org/spring/docs/2.0.x/reference/aop-api.html#aop-ts-pool
        The only requirement is the dependency 'commons-pool'
    -->
    <bean id="chargeOrderRetryMessageListenerTarget"
          class="org.pprun.hjpetstore.service.jms.ChargeOrderRetryMessageListener"
          scope="prototype">
        <description>Create a prototype ChargeOrderRetryMessageListener with its own copy of orderService</description>
        <property name="orderService" ref="orderService"/>
    </bean>

    <bean id="chargeOrderRetryMessageListenerPoolTargetSource" class="org.springframework.aop.target.CommonsPoolTargetSource">
        <property name="targetBeanName" value="chargeOrderRetryMessageListenerTarget"/>
        <!-- TODO: set it according to load test, based on orders hit/sec -->
        <property name="maxSize" value="25"/>
    </bean>
    <!-- this is the Message Driven POJO (MDP) for listening on supplier response the order status -->
    <bean id="chargeOrderRetryMessageListener" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="targetSource" ref="chargeOrderRetryMessageListenerPoolTargetSource"/>
    </bean>

    <!-- ================== supplier side mock ==================== -->
    <!-- notfiy the hjpetstore the current order status -->
    <bean id="supplierResponseQueueSender" class="org.pprun.hjpetstore.service.jms.supplier.SupplierResponseQueueSender" >
        <property name="jmsTemplate" ref="jmsTemplate"/>
        <property name="supplierResponseQueue" ref="supplierResponseQueue"/>
    </bean>

    <!-- listener for async -->
    <!-- mock the process at supplier side to response order request -->
    <!-- East Pet Company (which is supplier name set in table supplier -->
    <bean id="eastPetCompanyOrderQueueContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination" ref="hjpetstoreOrderQueue"/>
        <property name="messageListener" ref="eastPetCompanyOrderQueueMessageListener"/>
        <property name="messageSelector" value="supplier = 'East Pet Company'"/>
        <property name="errorHandler" ref="errorHandler" />
    </bean>

    <!-- this is the Message Driven POJO (MDP) mocked for supplier (East Pet Company)
    listening on the incoming order request from hjpetstore -->
    <bean id="eastPetCompanyOrderQueueMessageListener" class="org.pprun.hjpetstore.service.jms.supplier.EastPetCompanyOrderQueueMessageListener" />

    <!-- Beijing Little Pet Supplier (which is supplier name set in table supplier -->
    <bean id="bjLittlePetSupplierOrderQueueContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination" ref="hjpetstoreOrderQueue"/>
        <property name="messageListener" ref="bjLittlePetSupplierOrderQueueMessageListener"/>
        <property name="messageSelector" value="supplier = 'Beijing Little Pet Supplier'"/>
        <property name="errorHandler" ref="errorHandler" />
    </bean>

    <!-- this is the Message Driven POJO (MDP) mocked for supplier (Beijing Little Pet Supplier)
    listening on the incoming order request(the topic) from hjpetstore -->
    <bean id="bjLittlePetSupplierOrderQueueMessageListener" class="org.pprun.hjpetstore.service.jms.supplier.BjLittlePetSupplierOrderQueueMessageListener" />


    <!-- mock the process at supplier(East Pet Company) side to response the order backed topic -->
    <bean id="eastPetCompanyBackOrderedTopicContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination" ref="hjpetstoreBackOrderedTopic"/>
        <property name="messageListener" ref="eastPetCompanyBackOrderedTopicMessageListener"/>
        <property name="errorHandler" ref="errorHandler" />
    </bean>
    
    <bean id="eastPetCompanyBackOrderedTopicMessageListener" class="org.pprun.hjpetstore.service.jms.supplier.EastPetCompanyBackOrderedTopicMessageListener" />

    <!-- mock the process at supplier(Beijing Little Pet Supplier) side to response the order backed topic -->   
    <bean id="bjLittlePetSupplierBackOrderedTopicContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination" ref="hjpetstoreBackOrderedTopic"/>
        <property name="messageListener" ref="bjLittlePetSupplierBackOrderedTopicMessageListener"/>
        <property name="errorHandler" ref="errorHandler" />
        <!-- true是topic，false是queue，默认是false，此处显示写出false -->
        <property name="pubSubDomain" value="true" />
    </bean>

    <bean id="bjLittlePetSupplierBackOrderedTopicMessageListener" class="org.pprun.hjpetstore.service.jms.supplier.BjLittlePetSupplierBackOrderedTopicMessageListener" />

    <bean id="errorHandler" class="org.pprun.hjpetstore.service.jms.SampleJmsErrorHandler" />

</beans>
