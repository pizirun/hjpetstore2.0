<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    <display-name>Hibernate Spring JPetStore</display-name>
    <description>Hibenrate Spring JPetStore sample application developed by:
                 Pprun - quest.run@gmail.com, http://hi.baidu.com/quest2run
    </description>
    <!--
	  - Key of the system property that should specify the root directory of this
	  - web app. Applied by WebAppRootListener or Log4jConfigListener.!
    -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>hjpetstore.root</param-value>
    </context-param>
    <!--
        Location of the Log4J config file, for initialization and refresh checks.
        Applied by Log4jConfigListener.
    -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/log4j.properties</param-value>
    </context-param>
    <!--
        Location of the XML file that defines the root application context.
        Applied by ContextLoaderServlet.
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- simple and can only be used in servlet container such as Jetty or Tomcat, and can not used in cluster env. -->
        <!--        <param-value>
            /WEB-INF/applicationContext.xml /WEB-INF/jms.xml /WEB-INF/dataAccessContext-hibernate.xml
        </param-value>-->
        <!-- alternative to jta used in java EE server -->
        <param-value>
            /WEB-INF/applicationContext.xml /WEB-INF/jms.xml /WEB-INF/dataAccessContext-jta.xml
        </param-value>
        <!-- this one to use jboss infinispan cache -->
        <!--        <param-value>
            /WEB-INF/applicationContext.xml /WEB-INF/jms.xml /WEB-INF/dataAccessContext-jta-infinispan.xml
        </param-value>-->
    </context-param>
    <!--
        For JBoss: Avoid to setup Log4J outside $JBOSS_HOME/server/default/deploy/log4j.xml!
        So, must comment the Log4J listener out (in web.xml)
        For all other servers: un-comment (not comment) the Log4J listener in web.xml
        to activate Log4J.

        Configures Log4J for this web app.
        As this context specifies a context-param "log4jConfigLocation", its file path
        is used to load the Log4J configuration, including periodic refresh checks.

        Would fall back to default Log4J initialization (non-refreshing) if no special
        context-params are given.

        Exports a "web app root key", i.e. a system property that specifies the root
        directory of this web app, for usage in log file paths.
        This web app specifies "hjpetstore.root" (see log4j.properties file).
    -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <!--
        Loads the root application context of this web app at startup,
        by default from "/WEB-INF/applicationContext.xml".

        Use WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        to access it anywhere in the web application, outside of the framework.

        The root context is the parent of all servlet-specific contexts.
        This means that its beans are automatically available in these child contexts,
        both for getBean(name) calls and (external) bean references.
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--
            Defines the 'default' servlet (usually for service static resources).
            Uncomment this in containers (GlassFish) that do not declare this
            implicit definition out of the box, or change the name of the servlet mapping
            below to the appropriate one.
    -->
    <!--    <servlet>
        <servlet-name>default</servlet-name>
        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <param-name>listings</param-name>
            <param-value>true</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/images/*</url-pattern>
    </servlet-mapping>-->
    <!--
        kaptcha: Make sure to start your JDK with -Djava.awt.headless=true
    -->
    <servlet>
        <servlet-name>Kaptcha</servlet-name>
        <servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Kaptcha</servlet-name>
        <url-pattern>/kaptcha.jpg</url-pattern>
    </servlet-mapping>
    <!--
        Spring web MVC servlet that dispatches requests to registered handlers.
        Has its own application context, by default defined in "{servlet-name}-servlet.xml",
        i.e. "hjpetstore-servlet.xml" in this case.

        A web app can contain any number of such servlets.
        Note that this web app has a shared root application context, serving as parent
        of all DispatcherServlet contexts.
    -->
    <servlet>
        <servlet-name>hjpetstore</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>3</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>hjpetstore</servlet-name>
        <!--
          we mapped *.htm to Spring DispatcherServlet, and 'html' will be static/plain html file
        -->
        <url-pattern>*.html</url-pattern>
        <!-- this is for rest path, as rest can pass the PathVariable in URL-->
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>
    <!-- filter to set the encoding, the encoding should be consistent in all layers of the application -->
    <filter>
        <filter-name>Set Character Encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>Set Character Encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- For REST, use OAuthFilter instead -->
    <!--
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    -->

    <!--
        While HTTP defines four methods, HTML only supports two: GET and POST.
        Fortunately, there are two possible workarounds:
        you can either use JavaScript to do your PUT or DELETE,
        or simply do a POST with the 'real' method as an additional parameter (modeled as a hidden input field in an HTML form).
        This latter trick is what the HiddenHttpMethodFilter does.
        Simply add this filter to your web.xml, and a POST with a hidden _method parameter
        will be converted into the corresponding HTTP method request.
    -->
    <filter>
        <filter-name>httpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>httpMethodFilter</filter-name>
        <servlet-name>hjpetstore</servlet-name>
    </filter-mapping>

    <filter>
        <filter-name>OAuthFilter</filter-name>
        <filter-class>org.pprun.common.security.OAuthFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>OAuthFilter</filter-name>
        <url-pattern>/rest/*</url-pattern>
    </filter-mapping>
    <session-config>
        <session-timeout>
            30
        </session-timeout>
    </session-config>

    <welcome-file-list>
        <!-- use server side redirect technique.
        note that this is relative path because at this time it is still in standard servlet container -->
        <welcome-file>redirect.jsp</welcome-file>
    </welcome-file-list>

    <!-- -->
    <error-page>
        <error-code>400</error-code>
        <location>/WEB-INF/jsp/shop/ErrorCode.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/jsp/shop/ErrorCode.jsp</location>
    </error-page>
    <error-page>
        <error-code>405</error-code>
        <location>/WEB-INF/jsp/shop/ErrorCode.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/jsp/shop/ErrorCode.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
	<!-- Displays a stack trace, TODO: should customized to user friendly page -->
        <location>/WEB-INF/jsp/shop/ErrorCode.jsp</location>
    </error-page>

    <!--
        Only needed for JTA: dataAccessContext-jta.xml or dataAccessContext-jta-infinispan.xml.
    -->
    <resource-ref>
        <res-ref-name>jdbc/hjpetstore</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>
</web-app>
