<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>WEB-INF/application.properties</value>
            </list>
        </property>
    </bean>

    <!-- import rest beans -->
<!--    <import resource="hjpetstore-rest.xml" />-->

	<!--
            To enable autodetection of such annotated controllers, you add component scanning to your configuration.
            The controllers are autodetected POJOs labeled with the @Controller annotation.
	-->
    <context:component-scan base-package="org.pprun.hjpetstore.web.rest, org.pprun.hjpetstore.service.ws"/>

	<!--
            The form-based controllers within this application provide @RequestMapping
            annotations at the class level for path mapping URLs
            and @RequestMapping at the method level for request type mappings (e.g., GET and POST).

            In contrast, all other controller which are not form-based
            provides @RequestMapping only at the method level for path mapping URLs.

            DefaultAnnotationHandlerMapping is driven by these annotations and is
            enabled by default with Java 5
            So we don't have to define it.
	-->
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>


    <!-- view resolver -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="mediaTypes">
            <map>
                <entry key="xml" value="application/xml"/>
                <entry key="html" value="text/html"/>
            </map>
        </property>
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="1"/>

                <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/jsp/shop/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
            </list>
        </property>
    </bean>

    <!--
            This bean resolves specific types of exceptions to corresponding logical
            view names for error views. The default behaviour of DispatcherServlet
            is to propagate all exceptions to the servlet container: this will happen
            here with all other types of exceptions.
    -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
            </props>
        </property>
    </bean>
   
    <bean id="defaultHandlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>

    <bean name="/shop/index.html" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
        <property name="viewName" value="index"/>
    </bean>

    <bean name="/shop/error.html" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
        <property name="viewName" value="Error"/>
    </bean>

    <bean name="/shop/searchProducts.html" class="org.pprun.hjpetstore.web.SearchProductsController">
        <property name="productService" ref="productService"/>
    </bean>

    <bean name="/shop/viewCategory.html" class="org.pprun.hjpetstore.web.ViewCategoryController">
        <property name="categoryService" ref="categoryService"/>
        <property name="productService" ref="productService"/>
    </bean>

    <bean name="/shop/viewItem.html" class="org.pprun.hjpetstore.web.ViewItemController">
        <property name="itemService" ref="itemService"/>
    </bean>

    <bean name="/shop/viewProduct.html" class="org.pprun.hjpetstore.web.ViewProductController">
        <property name="itemService" ref="itemService"/>
        <property name="productService" ref="productService"/>
    </bean>

    <bean name="/shop/viewCart.html" class="org.pprun.hjpetstore.web.ViewCartController">
        <property name="successView" value="Cart"/>
    </bean>

    <bean name="/shop/updateCartQuantities.html" class="org.pprun.hjpetstore.web.UpdateCartQuantitiesController"/>

    <bean name="/shop/addItemToCart.html" class="org.pprun.hjpetstore.web.AddItemToCartController">
        <property name="itemService" ref="itemService"/>
    </bean>

    <bean name="/shop/removeItemFromCart.html" class="org.pprun.hjpetstore.web.RemoveItemFromCartController"/>

    <bean name="/shop/checkout.html" class="org.pprun.hjpetstore.web.ViewCartController">
        <property name="successView" value="Checkout"/>
    </bean>

    <bean name="/shop/signoff.html" class="org.pprun.hjpetstore.web.SignoffController">
        <property name="successView" value="redirect:/shop/index.html"/>
    </bean>

    <bean name="/shop/signon.html" class="org.pprun.hjpetstore.web.SignonController">
        <property name="userService" ref="userService"/>
        <property name="productService" ref="productService"/>
        <property name="successView" value="/shop/index.html"/>
        <property name="port" value="${http.port}" />
    </bean>

    <!--  protected resource need logon firstly -->
    <bean id="signonInterceptor" class="org.pprun.hjpetstore.web.SignonInterceptor"/>
        
    <!-- interceptor to redirect to SSL port to protect sensitive resource -->
    <bean id="httpsUrlRewritingInterceptor" class="org.pprun.hjpetstore.web.HttpsUrlRewritingInterceptor">
        <property name="sslPort" value="${ssl.port}" />
    </bean>
    
    <!-- editUser and newOrder need both above interceptor -->
    <bean id="secureHandlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="httpsUrlRewritingInterceptor" />
                <ref bean="signonInterceptor"/>
            </list>
        </property>
        <property name="urlMap">
            <map>
                <entry key="/shop/editUser.html" value-ref="secure_editUser"/>
                <entry key="/shop/newOrder.html" value-ref="secure_newOrder"/>
            </map>
        </property>
    </bean>

    <!-- views need signonInterceptor -->
    <bean id="signonHandlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="signonInterceptor"/>
            </list>
        </property>
        <property name="urlMap">
            <map>
                <entry key="/shop/listOrders.html" value-ref="secure_listOrders"/>
                <entry key="/shop/viewOrder.html" value-ref="secure_viewOrder"/>
            </map>
        </property>
    </bean>

    <!-- signonForm and newUser need httpsUrlRewritingInterceptor -->
    <bean id="sslHandlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="httpsUrlRewritingInterceptor"/>
            </list>
        </property>
        <property name="urlMap">
            <map>
                <entry key="/shop/signonForm.html" value-ref="ssl_signonForm"/>
                <entry key="/shop/newUser.html" value-ref="ssl_newUser"/>
            </map>
        </property>
    </bean>

    <bean id="secure_editUser" class="org.pprun.hjpetstore.web.UserFormController">
        <property name="userService" ref="userService"/>
        <property name="categoryService" ref="categoryService"/>
        <property name="productService" ref="productService"/>
        <property name="validator" ref="userValidator"/>
        <property name="port" value="${http.port}" />
    </bean>

    <bean id="secure_listOrders" class="org.pprun.hjpetstore.web.ListOrdersController">
        <property name="orderService" ref="orderService"/>
    </bean>

    <bean id="secure_newOrder" class="org.pprun.hjpetstore.web.OrderFormController">
        <property name="userService" ref="userService"/>
        <property name="orderService" ref="orderService"/>
        <property name="validator" ref="orderValidator"/>
        <property name="port" value="${http.port}" />
    </bean>

    <bean id="secure_viewOrder" class="org.pprun.hjpetstore.web.ViewOrderController">
        <property name="orderService" ref="orderService"/>
    </bean>

    <bean id="ssl_signonForm" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
        <property name="viewName" value="SignonForm"/>
    </bean>

    <bean id="ssl_newUser" class="org.pprun.hjpetstore.web.UserFormController">
        <property name="userService" ref="userService"/>
        <property name="categoryService" ref="categoryService"/>
        <property name="productService" ref="productService"/>
        <property name="validator" ref="userValidator"/>
        <property name="port" value="${http.port}" />
    </bean>

    <!--
        Message source for this context, loaded from localized "messages" files.
    -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:basename="messages"/>

    <bean id="products" class="org.springframework.web.servlet.view.xml.MarshallingView">
        <constructor-arg ref="jaxb2Marshaller" />
    </bean>

    <!--JAXB2 marshaller binder for Java : xml -->
    <bean id="jaxb2Marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>org.pprun.hjpetstore.persistence.Products</value>
            </list>
        </property>
        <!-- we can depend on the xsd file for automatically validation -->
        <!-- <property name="schema" value="classpath:org/springframework/oxm/schema.xsd"/>-->
    </bean>

</beans>
