<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


    <!-- Main JNDI DataSource for J2EE environments -->
    <jee:jndi-lookup id="dataSource" jndi-name="jdbc/hjpetstore"/>

    <!-- Local Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>

        <!--
            externalized the hibernate configuration for more easier maintain and
            different strategy, such as unit test.
        -->
        <property name="configLocation" value="classpath:hibernate-jta.cfg.xml" />

        <!-- Interceptor to set the createTime and updateTime fields automatically -->
        <property name="entityInterceptor">
            <bean class="org.pprun.hjpetstore.persistence.AuditInterceptor" />
        </property>
        <property name="eventListeners">
            <map>
                <entry key="merge">
                    <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
                </entry>
            </map>
        </property>
    </bean>

        <!--
            Transaction manager that delegates to JTA (for distributed transactions across tow/multi databases or multiple transactional resources,)
            JBoss Cache requires integration with a JTA TransactionManager in order to meet the requirements of the second level caching use case.
            This means your Hibernate application must be configured to use JTA
        -->
    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManagerName" value="java:appserver/TransactionManager"/>
    </bean>
  
    
    <bean id="userDao" class="org.pprun.hjpetstore.dao.hibernate.HibernateUserDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="categoryDao" class="org.pprun.hjpetstore.dao.hibernate.HibernateCategoryDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="productDao" class="org.pprun.hjpetstore.dao.hibernate.HibernateProductDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="itemDao" class="org.pprun.hjpetstore.dao.hibernate.HibernateItemDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="orderDao" class="org.pprun.hjpetstore.dao.hibernate.HibernateOrderDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="rsaKeyDao" class="org.pprun.hjpetstore.dao.hibernate.HibernateRSAKeyDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="paymentPartnerDao" class="org.pprun.hjpetstore.dao.hibernate.HibernatePaymentPartnerDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--  {@literal DAO} annotated {@code @Repository}is eligible for Spring DataAccessException translation. -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

</beans>
